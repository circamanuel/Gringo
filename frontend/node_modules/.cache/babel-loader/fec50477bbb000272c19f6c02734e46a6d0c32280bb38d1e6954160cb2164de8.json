{"ast":null,"code":"const BASE_URL = 'http://localhost:8080/api';\n\n// Fetch all forums\nexport const fetchForums = async () => {\n  const response = await fetch(`${BASE_URL}/forums`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch forums');\n  }\n  return response.json();\n};\n\n// Fetch posts by forum ID\nexport const fetchPostsByForum = async forumId => {\n  const response = await fetch(`${BASE_URL}/posts?forumId=${forumId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch posts');\n  }\n  return response.json();\n};\n\n// Create a new post\nexport const createPost = async post => {\n  const token = localStorage.getItem('token');\n  const response = await fetch(`${BASE_URL}/posts`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(post)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create post');\n  }\n};\n\n// Login and retrieve a token\nexport const login = async credentials => {\n  const response = await fetch(`${BASE_URL}/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n  if (!response.ok) {\n    throw new Error('Login failed');\n  }\n  const data = await response.json();\n  return data.token; // Return the token for further use\n};\n\n// Register a new user\nexport const register = async credentials => {\n  const response = await fetch(`${BASE_URL}/auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n  if (!response.ok) {\n    throw new Error('Registration failed');\n  }\n};","map":{"version":3,"names":["BASE_URL","fetchForums","response","fetch","ok","Error","json","fetchPostsByForum","forumId","createPost","post","token","localStorage","getItem","method","headers","Authorization","body","JSON","stringify","login","credentials","data","register"],"sources":["C:/Users/manu_/Desktop/Gringo/forum-frontend/src/App.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8080/api';\n\n// Fetch all forums\nexport const fetchForums = async () => {\n    const response = await fetch(`${BASE_URL}/forums`);\n    if (!response.ok) {\n        throw new Error('Failed to fetch forums');\n    }\n    return response.json();\n};\n\n// Fetch posts by forum ID\nexport const fetchPostsByForum = async (forumId) => {\n    const response = await fetch(`${BASE_URL}/posts?forumId=${forumId}`);\n    if (!response.ok) {\n        throw new Error('Failed to fetch posts');\n    }\n    return response.json();\n};\n\n// Create a new post\nexport const createPost = async (post) => {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${BASE_URL}/posts`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(post),\n    });\n    if (!response.ok) {\n        throw new Error('Failed to create post');\n    }\n};\n\n// Login and retrieve a token\nexport const login = async (credentials) => {\n    const response = await fetch(`${BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(credentials),\n    });\n    if (!response.ok) {\n        throw new Error('Login failed');\n    }\n    const data = await response.json();\n    return data.token; // Return the token for further use\n};\n\n// Register a new user\nexport const register = async (credentials) => {\n    const response = await fetch(`${BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(credentials),\n    });\n    if (!response.ok) {\n        throw new Error('Registration failed');\n    }\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,2BAA2B;;AAE5C;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,SAAS,CAAC;EAClD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC7C;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,OAAO,IAAK;EAChD,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,kBAAkBQ,OAAO,EAAE,CAAC;EACpE,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC5C;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMG,UAAU,GAAG,MAAOC,IAAI,IAAK;EACtC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,QAAQ,EAAE;IAC9Cc,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAE,UAAUL,KAAK;IAClC,CAAC;IACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,IAAI;EAC7B,CAAC,CAAC;EACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC5C;AACJ,CAAC;;AAED;AACA,OAAO,MAAMe,KAAK,GAAG,MAAOC,WAAW,IAAK;EACxC,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,aAAa,EAAE;IACnDc,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,WAAW;EACpC,CAAC,CAAC;EACF,IAAI,CAACnB,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;EACnC;EACA,MAAMiB,IAAI,GAAG,MAAMpB,QAAQ,CAACI,IAAI,CAAC,CAAC;EAClC,OAAOgB,IAAI,CAACX,KAAK,CAAC,CAAC;AACvB,CAAC;;AAED;AACA,OAAO,MAAMY,QAAQ,GAAG,MAAOF,WAAW,IAAK;EAC3C,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,gBAAgB,EAAE;IACtDc,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,WAAW;EACpC,CAAC,CAAC;EACF,IAAI,CAACnB,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;EAC1C;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}