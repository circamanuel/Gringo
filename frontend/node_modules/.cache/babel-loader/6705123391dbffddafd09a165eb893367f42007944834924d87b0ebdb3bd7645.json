{"ast":null,"code":"const BASE_URL = 'http://localhost:8080/api';\n\n// Fetch all forums\nexport const fetchForums = async () => {\n  const response = await fetch(`${BASE_URL}/forums`, {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem('token')}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch forums');\n  }\n  return response.json();\n};\n\n// Create a new forum\nexport const createForum = async forum => {\n  const response = await fetch(`${BASE_URL}/forums`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${localStorage.getItem('token')}`\n    },\n    body: JSON.stringify(forum)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create forum');\n  }\n};\n\n// Fetch posts by forum ID\nexport const fetchPostsByForum = async forumId => {\n  const response = await fetch(`${BASE_URL}/posts?forumId=${forumId}`, {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem('token')}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch posts');\n  }\n  return response.json();\n};\n\n// Create a new post\nexport const createPost = async post => {\n  const response = await fetch(`${BASE_URL}/posts`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${localStorage.getItem('token')}`\n    },\n    body: JSON.stringify(post)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create post');\n  }\n};\n\n// Login user\nexport const login = async credentials => {\n  const response = await fetch(`${BASE_URL}/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n  if (!response.ok) {\n    throw new Error('Login failed');\n  }\n  const data = await response.json();\n  localStorage.setItem('token', data.token); // Save token in local storage\n};\n\n// Register user\nexport const register = async credentials => {\n  const response = await fetch(`${BASE_URL}/auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n  if (!response.ok) {\n    throw new Error('Registration failed');\n  }\n};","map":{"version":3,"names":["BASE_URL","fetchForums","response","fetch","headers","Authorization","localStorage","getItem","ok","Error","json","createForum","forum","method","body","JSON","stringify","fetchPostsByForum","forumId","createPost","post","login","credentials","data","setItem","token","register"],"sources":["C:/Users/manu_/Desktop/Gringo/forum-frontend/src/services/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8080/api';\r\n\r\n// Fetch all forums\r\nexport const fetchForums = async () => {\r\n    const response = await fetch(`${BASE_URL}/forums`, {\r\n        headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error('Failed to fetch forums');\r\n    }\r\n    return response.json();\r\n};\r\n\r\n// Create a new forum\r\nexport const createForum = async (forum) => {\r\n    const response = await fetch(`${BASE_URL}/forums`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n        body: JSON.stringify(forum),\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error('Failed to create forum');\r\n    }\r\n};\r\n\r\n// Fetch posts by forum ID\r\nexport const fetchPostsByForum = async (forumId) => {\r\n    const response = await fetch(`${BASE_URL}/posts?forumId=${forumId}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error('Failed to fetch posts');\r\n    }\r\n    return response.json();\r\n};\r\n\r\n// Create a new post\r\nexport const createPost = async (post) => {\r\n    const response = await fetch(`${BASE_URL}/posts`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n        body: JSON.stringify(post),\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error('Failed to create post');\r\n    }\r\n};\r\n\r\n// Login user\r\nexport const login = async (credentials) => {\r\n    const response = await fetch(`${BASE_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(credentials),\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error('Login failed');\r\n    }\r\n    const data = await response.json();\r\n    localStorage.setItem('token', data.token); // Save token in local storage\r\n};\r\n\r\n// Register user\r\nexport const register = async (credentials) => {\r\n    const response = await fetch(`${BASE_URL}/auth/register`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(credentials),\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error('Registration failed');\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}