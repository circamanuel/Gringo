{"ast":null,"code":"const BASE_URL = 'http://localhost:8080/api';\n\n/**\r\n * Allgemeine API-Anfragefunktion\r\n */\nconst apiRequest = async (endpoint, method = 'GET', body = null, isAuthRequired = false) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (isAuthRequired) {\n      const token = localStorage.getItem('token');\n      headers.Authorization = `Bearer ${token}`;\n    }\n    const response = await fetch(`${BASE_URL}${endpoint}`, {\n      method,\n      headers,\n      body: body ? JSON.stringify(body) : null\n    });\n    if (!response.ok) {\n      throw new Error(`Fehler: ${response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(`API Request Error: ${error.message}`);\n    throw error;\n  }\n};\n\n// Funktionen korrekt exportieren\nexport const fetchForums = async () => apiRequest('/forums');\nexport const createForum = async forum => apiRequest('/forums', 'POST', forum, true);\nexport const fetchPostsByForum = async forumId => apiRequest(`/posts?forumId=${forumId}`);\nexport const addCommentToForum = async (forumId, comment) => apiRequest(`/forums/${forumId}/comments`, 'POST', comment, true);\nexport const fetchCommentsByForum = async forumId => apiRequest(`/forums/${forumId}/comments`, 'GET');\nexport const login = async credentials => apiRequest('/auth/login', 'POST', credentials);\nexport const register = async credentials => apiRequest('/auth/register', 'POST', credentials);","map":{"version":3,"names":["BASE_URL","apiRequest","endpoint","method","body","isAuthRequired","headers","token","localStorage","getItem","Authorization","response","fetch","JSON","stringify","ok","Error","statusText","json","error","console","message","fetchForums","createForum","forum","fetchPostsByForum","forumId","addCommentToForum","comment","fetchCommentsByForum","login","credentials","register"],"sources":["C:/Users/merlini/Desktop/223/Gringo/frontend/src/services/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8080/api';\r\n\r\n/**\r\n * Allgemeine API-Anfragefunktion\r\n */\r\nconst apiRequest = async (endpoint, method = 'GET', body = null, isAuthRequired = false) => {\r\n    try {\r\n        const headers = { 'Content-Type': 'application/json' };\r\n        if (isAuthRequired) {\r\n            const token = localStorage.getItem('token');\r\n            headers.Authorization = `Bearer ${token}`;\r\n        }\r\n\r\n        const response = await fetch(`${BASE_URL}${endpoint}`, {\r\n            method,\r\n            headers,\r\n            body: body ? JSON.stringify(body) : null,\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Fehler: ${response.statusText}`);\r\n        }\r\n\r\n        return response.json();\r\n    } catch (error) {\r\n        console.error(`API Request Error: ${error.message}`);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Funktionen korrekt exportieren\r\nexport const fetchForums = async () => apiRequest('/forums');\r\nexport const createForum = async (forum) => apiRequest('/forums', 'POST', forum, true);\r\nexport const fetchPostsByForum = async (forumId) => apiRequest(`/posts?forumId=${forumId}`);\r\nexport const addCommentToForum = async (forumId, comment) =>\r\n    apiRequest(`/forums/${forumId}/comments`, 'POST', comment, true);\r\nexport const fetchCommentsByForum = async (forumId) =>\r\n    apiRequest(`/forums/${forumId}/comments`, 'GET');\r\nexport const login = async (credentials) => apiRequest('/auth/login', 'POST', credentials);\r\nexport const register = async (credentials) => apiRequest('/auth/register', 'POST', credentials);\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,2BAA2B;;AAE5C;AACA;AACA;AACA,MAAMC,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,EAAEC,cAAc,GAAG,KAAK,KAAK;EACxF,IAAI;IACA,MAAMC,OAAO,GAAG;MAAE,cAAc,EAAE;IAAmB,CAAC;IACtD,IAAID,cAAc,EAAE;MAChB,MAAME,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3CH,OAAO,CAACI,aAAa,GAAG,UAAUH,KAAK,EAAE;IAC7C;IAEA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGZ,QAAQ,GAAGE,QAAQ,EAAE,EAAE;MACnDC,MAAM;MACNG,OAAO;MACPF,IAAI,EAAEA,IAAI,GAAGS,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,GAAG;IACxC,CAAC,CAAC;IAEF,IAAI,CAACO,QAAQ,CAACI,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,WAAWL,QAAQ,CAACM,UAAU,EAAE,CAAC;IACrD;IAEA,OAAON,QAAQ,CAACO,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsBA,KAAK,CAACE,OAAO,EAAE,CAAC;IACpD,MAAMF,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAG,MAAAA,CAAA,KAAYrB,UAAU,CAAC,SAAS,CAAC;AAC5D,OAAO,MAAMsB,WAAW,GAAG,MAAOC,KAAK,IAAKvB,UAAU,CAAC,SAAS,EAAE,MAAM,EAAEuB,KAAK,EAAE,IAAI,CAAC;AACtF,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,OAAO,IAAKzB,UAAU,CAAC,kBAAkByB,OAAO,EAAE,CAAC;AAC3F,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAOD,OAAO,EAAEE,OAAO,KACpD3B,UAAU,CAAC,WAAWyB,OAAO,WAAW,EAAE,MAAM,EAAEE,OAAO,EAAE,IAAI,CAAC;AACpE,OAAO,MAAMC,oBAAoB,GAAG,MAAOH,OAAO,IAC9CzB,UAAU,CAAC,WAAWyB,OAAO,WAAW,EAAE,KAAK,CAAC;AACpD,OAAO,MAAMI,KAAK,GAAG,MAAOC,WAAW,IAAK9B,UAAU,CAAC,aAAa,EAAE,MAAM,EAAE8B,WAAW,CAAC;AAC1F,OAAO,MAAMC,QAAQ,GAAG,MAAOD,WAAW,IAAK9B,UAAU,CAAC,gBAAgB,EAAE,MAAM,EAAE8B,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}