{"ast":null,"code":"const BASE_URL = 'http://localhost:8080/api';\nexport const fetchForums = async () => {\n  const response = await fetch(`${BASE_URL}/forums`);\n  if (!response.ok) throw new Error('Failed to fetch forums');\n  return response.json();\n};\nexport const fetchPostsByForum = async forumId => {\n  const response = await fetch(`${BASE_URL}/posts?forumId=${forumId}`);\n  if (!response.ok) throw new Error('Failed to fetch posts');\n  return response.json();\n};\nexport const createPost = async post => {\n  const token = localStorage.getItem('token');\n  await fetch(`${BASE_URL}/posts`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(post)\n  });\n};\nexport const login = async credentials => {\n  const response = await fetch(`${BASE_URL}/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n  if (!response.ok) throw new Error('Login failed');\n  const data = await response.json();\n  return data.token;\n};\nexport const register = async credentials => {\n  const response = await fetch(`${BASE_URL}/auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n  if (!response.ok) throw new Error('Registration failed');\n};","map":{"version":3,"names":["BASE_URL","fetchForums","response","fetch","ok","Error","json","fetchPostsByForum","forumId","createPost","post","token","localStorage","getItem","method","headers","Authorization","body","JSON","stringify","login","credentials","data","register"],"sources":["C:/Users/manu_/Desktop/Gringo/forum-frontend/src/services/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8080/api';\r\n\r\nexport const fetchForums = async () => {\r\n    const response = await fetch(`${BASE_URL}/forums`);\r\n    if (!response.ok) throw new Error('Failed to fetch forums');\r\n    return response.json();\r\n};\r\n\r\nexport const fetchPostsByForum = async (forumId) => {\r\n    const response = await fetch(`${BASE_URL}/posts?forumId=${forumId}`);\r\n    if (!response.ok) throw new Error('Failed to fetch posts');\r\n    return response.json();\r\n};\r\n\r\nexport const createPost = async (post) => {\r\n    const token = localStorage.getItem('token');\r\n    await fetch(`${BASE_URL}/posts`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(post),\r\n    });\r\n};\r\n\r\nexport const login = async (credentials) => {\r\n    const response = await fetch(`${BASE_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(credentials),\r\n    });\r\n    if (!response.ok) throw new Error('Login failed');\r\n    const data = await response.json();\r\n    return data.token;\r\n};\r\n\r\nexport const register = async (credentials) => {\r\n    const response = await fetch(`${BASE_URL}/auth/register`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(credentials),\r\n    });\r\n    if (!response.ok) throw new Error('Registration failed');\r\n};\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,2BAA2B;AAE5C,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,SAAS,CAAC;EAClD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,OAAO,IAAK;EAChD,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,kBAAkBQ,OAAO,EAAE,CAAC;EACpE,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMG,UAAU,GAAG,MAAOC,IAAI,IAAK;EACtC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMV,KAAK,CAAC,GAAGH,QAAQ,QAAQ,EAAE;IAC7Bc,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAE,UAAUL,KAAK;IAClC,CAAC;IACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,IAAI;EAC7B,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMU,KAAK,GAAG,MAAOC,WAAW,IAAK;EACxC,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,aAAa,EAAE;IACnDc,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,WAAW;EACpC,CAAC,CAAC;EACF,IAAI,CAACnB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;EACjD,MAAMiB,IAAI,GAAG,MAAMpB,QAAQ,CAACI,IAAI,CAAC,CAAC;EAClC,OAAOgB,IAAI,CAACX,KAAK;AACrB,CAAC;AAED,OAAO,MAAMY,QAAQ,GAAG,MAAOF,WAAW,IAAK;EAC3C,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,gBAAgB,EAAE;IACtDc,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,WAAW;EACpC,CAAC,CAAC;EACF,IAAI,CAACnB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;AAC5D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}