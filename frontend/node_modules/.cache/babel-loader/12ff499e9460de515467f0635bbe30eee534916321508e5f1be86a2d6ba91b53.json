{"ast":null,"code":"const BASE_URL = 'http://localhost:8080/api';\n\n// Fetch all forums\nexport const fetchForums = async () => {\n  const response = await fetch(`${BASE_URL}/forums`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch forums');\n  }\n  return response.json();\n};\n\n// Create a new forum\nexport const createForum = async forum => {\n  const token = localStorage.getItem('token'); // Replace with token logic if necessary\n  const response = await fetch(`${BASE_URL}/forums`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(forum)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create forum');\n  }\n};\n\n// Fetch posts by forum ID\nexport const fetchPostsByForum = async forumId => {\n  const response = await fetch(`${BASE_URL}/posts?forumId=${forumId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch posts');\n  }\n  return response.json();\n};\n\n// Create a post\nexport const createPost = async post => {\n  const token = localStorage.getItem('token');\n  const response = await fetch(`${BASE_URL}/posts`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(post)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create post');\n  }\n};","map":{"version":3,"names":["BASE_URL","fetchForums","response","fetch","ok","Error","json","createForum","forum","token","localStorage","getItem","method","headers","Authorization","body","JSON","stringify","fetchPostsByForum","forumId","createPost","post"],"sources":["C:/Users/manu_/Desktop/Gringo/forum-frontend/src/App.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8080/api';\n\n// Fetch all forums\nexport const fetchForums = async () => {\n    const response = await fetch(`${BASE_URL}/forums`);\n    if (!response.ok) {\n        throw new Error('Failed to fetch forums');\n    }\n    return response.json();\n};\n\n// Create a new forum\nexport const createForum = async (forum) => {\n    const token = localStorage.getItem('token'); // Replace with token logic if necessary\n    const response = await fetch(`${BASE_URL}/forums`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(forum),\n    });\n    if (!response.ok) {\n        throw new Error('Failed to create forum');\n    }\n};\n\n// Fetch posts by forum ID\nexport const fetchPostsByForum = async (forumId) => {\n    const response = await fetch(`${BASE_URL}/posts?forumId=${forumId}`);\n    if (!response.ok) {\n        throw new Error('Failed to fetch posts');\n    }\n    return response.json();\n};\n\n// Create a post\nexport const createPost = async (post) => {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${BASE_URL}/posts`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(post),\n    });\n    if (!response.ok) {\n        throw new Error('Failed to create post');\n    }\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,2BAA2B;;AAE5C;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,SAAS,CAAC;EAClD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC7C;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG,MAAOC,KAAK,IAAK;EACxC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,SAAS,EAAE;IAC/CY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAE,UAAUL,KAAK;IAClC,CAAC;IACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,KAAK;EAC9B,CAAC,CAAC;EACF,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC7C;AACJ,CAAC;;AAED;AACA,OAAO,MAAMa,iBAAiB,GAAG,MAAOC,OAAO,IAAK;EAChD,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,kBAAkBmB,OAAO,EAAE,CAAC;EACpE,IAAI,CAACjB,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC5C;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMc,UAAU,GAAG,MAAOC,IAAI,IAAK;EACtC,MAAMZ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,QAAQ,EAAE;IAC9CY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAE,UAAUL,KAAK;IAClC,CAAC;IACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,IAAI;EAC7B,CAAC,CAAC;EACF,IAAI,CAACnB,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC5C;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}