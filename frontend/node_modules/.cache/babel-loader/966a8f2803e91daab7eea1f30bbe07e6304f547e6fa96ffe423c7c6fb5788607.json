{"ast":null,"code":"// Basis-URL für alle API-Aufrufe\nconst BASE_URL = 'http://localhost:8080/api';\n\n/**\r\n * Utility-Funktion: Holt den Token aus dem LocalStorage und überprüft seine Gültigkeit.\r\n * @returns {string|null} Der gültige Token oder null, wenn der Token fehlt oder ungültig ist.\r\n */\nconst getToken = () => {\n  const token = localStorage.getItem('token'); // Token aus LocalStorage abrufen\n  if (!token) return null;\n  try {\n    const {\n      exp\n    } = JSON.parse(atob(token.split('.')[1])); // JWT-Dekodierung\n    // Überprüfen, ob der Token abgelaufen ist\n    if (exp * 1000 < Date.now()) {\n      console.error('Token abgelaufen');\n      return null;\n    }\n    return token; // Gültiger Token wird zurückgegeben\n  } catch (error) {\n    console.error('Ungültiger Token:', error);\n    return null;\n  }\n};\n\n/**\r\n * Utility-Funktion: Erstellt die HTTP-Header für API-Aufrufe.\r\n * @param {boolean} isAuthRequired Gibt an, ob der Authorization-Header benötigt wird.\r\n * @returns {object} Die HTTP-Header.\r\n */\nconst getHeaders = (isAuthRequired = false) => {\n  const headers = {\n    'Content-Type': 'application/json'\n  }; // Standard-Header\n  if (isAuthRequired) {\n    const token = getToken();\n    if (token) headers.Authorization = `Bearer ${token}`; // Auth-Header hinzufügen\n  }\n  return headers;\n};\n\n/**\r\n * Utility-Funktion: Führt einen allgemeinen API-Aufruf durch.\r\n * @param {string} endpoint Der API-Endpunkt.\r\n * @param {string} method Die HTTP-Methode (z. B. GET, POST, PUT, DELETE).\r\n * @param {object|null} body Die Anfrage-Daten (falls erforderlich).\r\n * @param {boolean} isAuthRequired Gibt an, ob die Anfrage eine Authentifizierung erfordert.\r\n * @returns {Promise<any>} Die Antwort der API.\r\n */\nconst apiRequest = async (endpoint, method = 'GET', body = null, isAuthRequired = false) => {\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`, {\n      method,\n      headers: getHeaders(isAuthRequired),\n      body: body ? JSON.stringify(body) : null // Daten als JSON senden (falls vorhanden)\n    });\n\n    // Fehlerbehandlung basierend auf der Antwort\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(errorText || 'Fehler bei der API-Anfrage');\n    }\n    return response.status !== 204 ? response.json() : null; // Rückgabe, falls kein Inhalt (204)\n  } catch (error) {\n    console.error(`Fehler bei ${method} ${endpoint}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * API-Aufrufe\r\n */\n\n// Holt alle Foren\nexport const fetchForums = async () => apiRequest('/forums');\n\n/**\r\n * Erstellt ein neues Forum.\r\n * @param {object} forum Die Daten des neuen Forums.\r\n * @returns {Promise<any>} Die Antwort der API.\r\n */\nexport const createForum = async forum => apiRequest('/forums', 'POST', forum, true);\n\n/**\r\n * Holt Beiträge zu einem bestimmten Forum.\r\n * @param {string} forumId Die ID des Forums.\r\n * @returns {Promise<any>} Die Antwort der API.\r\n */\nexport const fetchPostsByForum = async forumId => apiRequest(`/posts?forumId=${forumId}`);\n\n/**\r\n * Fügt einen neuen Kommentar zu einem Forum hinzu.\r\n * @param {string} forumId Die ID des Forums.\r\n * @param {object} comment Der Kommentar (z. B. `{ content: \"Kommentartext\" }`).\r\n * @returns {Promise<any>} Die Antwort des Servers (hinzugefügter Kommentar).\r\n */\nexport const addCommentToForum = async (forumId, comment) => apiRequest(`/forums/${forumId}/comments`, 'POST', comment, true);\n\n/**\r\n * Holt alle Kommentare eines Forums.\r\n * @param {string} forumId Die ID des Forums.\r\n * @returns {Promise<any>} Eine Liste der Kommentare.\r\n */\nexport const fetchCommentsByForum = async forumId => apiRequest(`/forums/${forumId}/comments`, 'GET');\n\n/**\r\n * Führt den Login durch und gibt den Token zurück.\r\n * @param {object} credentials Die Login-Daten (z. B. Benutzername und Passwort).\r\n * @returns {Promise<string>} Der Token bei Erfolg.\r\n */\nexport const login = async credentials => {\n  const response = await apiRequest('/auth/login', 'POST', credentials);\n  return response.token; // Token zurückgeben\n};\n\n/**\r\n * Registriert einen neuen Benutzer.\r\n * @param {object} credentials Die Registrierungsdaten (z. B. Benutzername, Passwort).\r\n * @returns {Promise<void>} Keine Antwort bei Erfolg.\r\n */\nexport const register = async credentials => apiRequest('/auth/register', 'POST', credentials);","map":{"version":3,"names":["BASE_URL","getToken","token","localStorage","getItem","exp","JSON","parse","atob","split","Date","now","console","error","getHeaders","isAuthRequired","headers","Authorization","apiRequest","endpoint","method","body","response","fetch","stringify","ok","errorText","text","Error","status","json","fetchForums","createForum","forum","fetchPostsByForum","forumId","addCommentToForum","comment","fetchCommentsByForum","login","credentials","register"],"sources":["C:/Users/manu_/Desktop/Gringo/frontend/src/services/api.js"],"sourcesContent":["// Basis-URL für alle API-Aufrufe\r\nconst BASE_URL = 'http://localhost:8080/api';\r\n\r\n/**\r\n * Utility-Funktion: Holt den Token aus dem LocalStorage und überprüft seine Gültigkeit.\r\n * @returns {string|null} Der gültige Token oder null, wenn der Token fehlt oder ungültig ist.\r\n */\r\nconst getToken = () => {\r\n    const token = localStorage.getItem('token'); // Token aus LocalStorage abrufen\r\n    if (!token) return null;\r\n\r\n    try {\r\n        const { exp } = JSON.parse(atob(token.split('.')[1])); // JWT-Dekodierung\r\n        // Überprüfen, ob der Token abgelaufen ist\r\n        if (exp * 1000 < Date.now()) {\r\n            console.error('Token abgelaufen');\r\n            return null;\r\n        }\r\n        return token; // Gültiger Token wird zurückgegeben\r\n    } catch (error) {\r\n        console.error('Ungültiger Token:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * Utility-Funktion: Erstellt die HTTP-Header für API-Aufrufe.\r\n * @param {boolean} isAuthRequired Gibt an, ob der Authorization-Header benötigt wird.\r\n * @returns {object} Die HTTP-Header.\r\n */\r\nconst getHeaders = (isAuthRequired = false) => {\r\n    const headers = { 'Content-Type': 'application/json' }; // Standard-Header\r\n    if (isAuthRequired) {\r\n        const token = getToken();\r\n        if (token) headers.Authorization = `Bearer ${token}`; // Auth-Header hinzufügen\r\n    }\r\n    return headers;\r\n};\r\n\r\n/**\r\n * Utility-Funktion: Führt einen allgemeinen API-Aufruf durch.\r\n * @param {string} endpoint Der API-Endpunkt.\r\n * @param {string} method Die HTTP-Methode (z. B. GET, POST, PUT, DELETE).\r\n * @param {object|null} body Die Anfrage-Daten (falls erforderlich).\r\n * @param {boolean} isAuthRequired Gibt an, ob die Anfrage eine Authentifizierung erfordert.\r\n * @returns {Promise<any>} Die Antwort der API.\r\n */\r\nconst apiRequest = async (endpoint, method = 'GET', body = null, isAuthRequired = false) => {\r\n    try {\r\n        const response = await fetch(`${BASE_URL}${endpoint}`, {\r\n            method,\r\n            headers: getHeaders(isAuthRequired),\r\n            body: body ? JSON.stringify(body) : null, // Daten als JSON senden (falls vorhanden)\r\n        });\r\n\r\n        // Fehlerbehandlung basierend auf der Antwort\r\n        if (!response.ok) {\r\n            const errorText = await response.text();\r\n            throw new Error(errorText || 'Fehler bei der API-Anfrage');\r\n        }\r\n\r\n        return response.status !== 204 ? response.json() : null; // Rückgabe, falls kein Inhalt (204)\r\n    } catch (error) {\r\n        console.error(`Fehler bei ${method} ${endpoint}:`, error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * API-Aufrufe\r\n */\r\n\r\n// Holt alle Foren\r\nexport const fetchForums = async () => apiRequest('/forums');\r\n\r\n/**\r\n * Erstellt ein neues Forum.\r\n * @param {object} forum Die Daten des neuen Forums.\r\n * @returns {Promise<any>} Die Antwort der API.\r\n */\r\nexport const createForum = async (forum) => apiRequest('/forums', 'POST', forum, true);\r\n\r\n/**\r\n * Holt Beiträge zu einem bestimmten Forum.\r\n * @param {string} forumId Die ID des Forums.\r\n * @returns {Promise<any>} Die Antwort der API.\r\n */\r\nexport const fetchPostsByForum = async (forumId) => apiRequest(`/posts?forumId=${forumId}`);\r\n\r\n/**\r\n * Fügt einen neuen Kommentar zu einem Forum hinzu.\r\n * @param {string} forumId Die ID des Forums.\r\n * @param {object} comment Der Kommentar (z. B. `{ content: \"Kommentartext\" }`).\r\n * @returns {Promise<any>} Die Antwort des Servers (hinzugefügter Kommentar).\r\n */\r\nexport const addCommentToForum = async (forumId, comment) =>\r\n    apiRequest(`/forums/${forumId}/comments`, 'POST', comment, true);\r\n\r\n/**\r\n * Holt alle Kommentare eines Forums.\r\n * @param {string} forumId Die ID des Forums.\r\n * @returns {Promise<any>} Eine Liste der Kommentare.\r\n */\r\nexport const fetchCommentsByForum = async (forumId) =>\r\n    apiRequest(`/forums/${forumId}/comments`, 'GET');\r\n\r\n/**\r\n * Führt den Login durch und gibt den Token zurück.\r\n * @param {object} credentials Die Login-Daten (z. B. Benutzername und Passwort).\r\n * @returns {Promise<string>} Der Token bei Erfolg.\r\n */\r\nexport const login = async (credentials) => {\r\n    const response = await apiRequest('/auth/login', 'POST', credentials);\r\n    return response.token; // Token zurückgeben\r\n};\r\n\r\n/**\r\n * Registriert einen neuen Benutzer.\r\n * @param {object} credentials Die Registrierungsdaten (z. B. Benutzername, Passwort).\r\n * @returns {Promise<void>} Keine Antwort bei Erfolg.\r\n */\r\nexport const register = async (credentials) => apiRequest('/auth/register', 'POST', credentials);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}