{"ast":null,"code":"const BASE_URL = 'http://localhost:8080/api';\n\n// Fetch all forums\nexport const fetchForums = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/forums`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch forums');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching forums:', error);\n    throw error;\n  }\n};\n\n// Create a new forum\nexport const createForum = async forum => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${BASE_URL}/forums`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(forum)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create forum');\n    }\n  } catch (error) {\n    console.error('Error creating forum:', error);\n    throw error;\n  }\n};\n\n// Fetch posts by forum ID\nexport const fetchPostsByForum = async forumId => {\n  try {\n    const response = await fetch(`${BASE_URL}/posts?forumId=${forumId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch posts by forum');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching posts by forum:', error);\n    throw error;\n  }\n};\n\n// Fetch posts by user ID\nexport const fetchPostsByUser = async username => {\n  try {\n    const response = await fetch(`${BASE_URL}/posts?username=${username}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch user posts');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching user posts:', error);\n    throw error;\n  }\n};\n\n// Create a new post\nexport const createPost = async post => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${BASE_URL}/posts`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(post)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create post');\n    }\n  } catch (error) {\n    console.error('Error creating post:', error);\n    throw error;\n  }\n};\n\n// Update a post\nexport const updatePost = async (postId, post) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${BASE_URL}/posts/${postId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(post)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update post');\n    }\n  } catch (error) {\n    console.error('Error updating post:', error);\n    throw error;\n  }\n};\n\n// Delete a post\nexport const deletePost = async postId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${BASE_URL}/posts/${postId}`, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete post');\n    }\n  } catch (error) {\n    console.error('Error deleting post:', error);\n    throw error;\n  }\n};\n\n// Login and retrieve a token\nexport const login = async credentials => {\n  try {\n    const response = await fetch(`${BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      throw new Error('Login failed');\n    }\n    const data = await response.json();\n    return data.token; // Return the token for further use\n  } catch (error) {\n    console.error('Error during login:', error);\n    throw error;\n  }\n};\n\n// Register a new user\nexport const register = async credentials => {\n  try {\n    const response = await fetch(`${BASE_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      throw new Error('Registration failed');\n    }\n  } catch (error) {\n    console.error('Error during registration:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","fetchForums","response","fetch","ok","Error","json","error","console","createForum","forum","token","localStorage","getItem","method","headers","Authorization","body","JSON","stringify","fetchPostsByForum","forumId","fetchPostsByUser","username","createPost","post","updatePost","postId","deletePost","login","credentials","data","register"],"sources":["C:/Users/manu_/Desktop/Gringo/forum-frontend/src/services/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8080/api';\r\n\r\n// Fetch all forums\r\nexport const fetchForums = async () => {\r\n    try {\r\n        const response = await fetch(`${BASE_URL}/forums`);\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch forums');\r\n        }\r\n        return response.json();\r\n    } catch (error) {\r\n        console.error('Error fetching forums:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Create a new forum\r\nexport const createForum = async (forum) => {\r\n    try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await fetch(`${BASE_URL}/forums`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify(forum),\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error('Failed to create forum');\r\n        }\r\n    } catch (error) {\r\n        console.error('Error creating forum:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fetch posts by forum ID\r\nexport const fetchPostsByForum = async (forumId) => {\r\n    try {\r\n        const response = await fetch(`${BASE_URL}/posts?forumId=${forumId}`);\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch posts by forum');\r\n        }\r\n        return response.json();\r\n    } catch (error) {\r\n        console.error('Error fetching posts by forum:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fetch posts by user ID\r\nexport const fetchPostsByUser = async (username) => {\r\n    try {\r\n        const response = await fetch(`${BASE_URL}/posts?username=${username}`);\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch user posts');\r\n        }\r\n        return response.json();\r\n    } catch (error) {\r\n        console.error('Error fetching user posts:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Create a new post\r\nexport const createPost = async (post) => {\r\n    try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await fetch(`${BASE_URL}/posts`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify(post),\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error('Failed to create post');\r\n        }\r\n    } catch (error) {\r\n        console.error('Error creating post:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Update a post\r\nexport const updatePost = async (postId, post) => {\r\n    try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await fetch(`${BASE_URL}/posts/${postId}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify(post),\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error('Failed to update post');\r\n        }\r\n    } catch (error) {\r\n        console.error('Error updating post:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Delete a post\r\nexport const deletePost = async (postId) => {\r\n    try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await fetch(`${BASE_URL}/posts/${postId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error('Failed to delete post');\r\n        }\r\n    } catch (error) {\r\n        console.error('Error deleting post:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Login and retrieve a token\r\nexport const login = async (credentials) => {\r\n    try {\r\n        const response = await fetch(`${BASE_URL}/auth/login`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(credentials),\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error('Login failed');\r\n        }\r\n        const data = await response.json();\r\n        return data.token; // Return the token for further use\r\n    } catch (error) {\r\n        console.error('Error during login:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Register a new user\r\nexport const register = async (credentials) => {\r\n    try {\r\n        const response = await fetch(`${BASE_URL}/auth/register`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(credentials),\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error('Registration failed');\r\n        }\r\n    } catch (error) {\r\n        console.error('Error during registration:', error);\r\n        throw error;\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,2BAA2B;;AAE5C;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,SAAS,CAAC;IAClD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC7C;IACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAG,MAAOC,KAAK,IAAK;EACxC,IAAI;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,SAAS,EAAE;MAC/Cc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUL,KAAK;MAClC,CAAC;MACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,KAAK;IAC9B,CAAC,CAAC;IACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC7C;EACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMa,iBAAiB,GAAG,MAAOC,OAAO,IAAK;EAChD,IAAI;IACA,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,kBAAkBqB,OAAO,EAAE,CAAC;IACpE,IAAI,CAACnB,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;IACrD;IACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMe,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;EAChD,IAAI;IACA,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,mBAAmBuB,QAAQ,EAAE,CAAC;IACtE,IAAI,CAACrB,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;IACjD;IACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMiB,UAAU,GAAG,MAAOC,IAAI,IAAK;EACtC,IAAI;IACA,MAAMd,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,QAAQ,EAAE;MAC9Cc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUL,KAAK;MAClC,CAAC;MACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACM,IAAI;IAC7B,CAAC,CAAC;IACF,IAAI,CAACvB,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC5C;EACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMmB,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEF,IAAI,KAAK;EAC9C,IAAI;IACA,MAAMd,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,UAAU2B,MAAM,EAAE,EAAE;MACxDb,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUL,KAAK;MAClC,CAAC;MACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACM,IAAI;IAC7B,CAAC,CAAC;IACF,IAAI,CAACvB,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC5C;EACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMqB,UAAU,GAAG,MAAOD,MAAM,IAAK;EACxC,IAAI;IACA,MAAMhB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,UAAU2B,MAAM,EAAE,EAAE;MACxDb,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUL,KAAK;MAClC;IACJ,CAAC,CAAC;IACF,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC5C;EACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMsB,KAAK,GAAG,MAAOC,WAAW,IAAK;EACxC,IAAI;IACA,MAAM5B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,aAAa,EAAE;MACnDc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACW,WAAW;IACpC,CAAC,CAAC;IACF,IAAI,CAAC5B,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;IACnC;IACA,MAAM0B,IAAI,GAAG,MAAM7B,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClC,OAAOyB,IAAI,CAACpB,KAAK,CAAC,CAAC;EACvB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMyB,QAAQ,GAAG,MAAOF,WAAW,IAAK;EAC3C,IAAI;IACA,MAAM5B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,gBAAgB,EAAE;MACtDc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACW,WAAW;IACpC,CAAC,CAAC;IACF,IAAI,CAAC5B,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IAC1C;EACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}