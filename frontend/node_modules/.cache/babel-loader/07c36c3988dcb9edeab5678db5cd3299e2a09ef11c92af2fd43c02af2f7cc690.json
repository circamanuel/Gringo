{"ast":null,"code":"const BASE_URL = 'http://localhost:8080/api';\n\n// Utility function for API requests\nconst apiRequest = async (endpoint, options = {}) => {\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`, options);\n\n    // Check if the response is okay\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      throw new Error(errorMessage || `HTTP Error: ${response.status}`);\n    }\n\n    // Parse JSON if applicable\n    const contentType = response.headers.get('Content-Type');\n    if (contentType && contentType.includes('application/json')) {\n      return response.json();\n    }\n    return null; // If no JSON body is expected\n  } catch (error) {\n    console.error('API Error:', error.message);\n    throw error; // Re-throw the error to be handled by the calling code\n  }\n};\n\n// Fetch all forums\nexport const fetchForums = async () => {\n  return apiRequest('/forums');\n};\n\n// Create a new forum\nexport const createForum = async forum => {\n  const token = localStorage.getItem('token');\n  return apiRequest('/forums', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(forum)\n  });\n};\n\n// Fetch all posts\nexport const fetchPosts = async () => {\n  return apiRequest('/posts');\n};\n\n// User login\nexport const login = async credentials => {\n  const data = await apiRequest('/auth/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n\n  // Save token to localStorage for future requests\n  if (data.token) {\n    localStorage.setItem('token', data.token);\n  }\n  return data;\n};\n\n// User registration\nexport const register = async credentials => {\n  return apiRequest('/auth/register', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n};\n\n// Logout (clear token)\nexport const logout = () => {\n  localStorage.removeItem('token');\n};","map":{"version":3,"names":["BASE_URL","apiRequest","endpoint","options","response","fetch","ok","errorMessage","text","Error","status","contentType","headers","get","includes","json","error","console","message","fetchForums","createForum","forum","token","localStorage","getItem","method","Authorization","body","JSON","stringify","fetchPosts","login","credentials","data","setItem","register","logout","removeItem"],"sources":["C:/Users/manu_/Desktop/Gringo/forum-frontend/src/services/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8080/api';\r\n\r\n// Utility function for API requests\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n    try {\r\n        const response = await fetch(`${BASE_URL}${endpoint}`, options);\r\n\r\n        // Check if the response is okay\r\n        if (!response.ok) {\r\n            const errorMessage = await response.text();\r\n            throw new Error(errorMessage || `HTTP Error: ${response.status}`);\r\n        }\r\n\r\n        // Parse JSON if applicable\r\n        const contentType = response.headers.get('Content-Type');\r\n        if (contentType && contentType.includes('application/json')) {\r\n            return response.json();\r\n        }\r\n\r\n        return null; // If no JSON body is expected\r\n    } catch (error) {\r\n        console.error('API Error:', error.message);\r\n        throw error; // Re-throw the error to be handled by the calling code\r\n    }\r\n};\r\n\r\n// Fetch all forums\r\nexport const fetchForums = async () => {\r\n    return apiRequest('/forums');\r\n};\r\n\r\n// Create a new forum\r\nexport const createForum = async (forum) => {\r\n    const token = localStorage.getItem('token');\r\n    return apiRequest('/forums', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(forum),\r\n    });\r\n};\r\n\r\n// Fetch all posts\r\nexport const fetchPosts = async () => {\r\n    return apiRequest('/posts');\r\n};\r\n\r\n// User login\r\nexport const login = async (credentials) => {\r\n    const data = await apiRequest('/auth/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(credentials),\r\n    });\r\n\r\n    // Save token to localStorage for future requests\r\n    if (data.token) {\r\n        localStorage.setItem('token', data.token);\r\n    }\r\n    return data;\r\n};\r\n\r\n// User registration\r\nexport const register = async (credentials) => {\r\n    return apiRequest('/auth/register', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(credentials),\r\n    });\r\n};\r\n\r\n// Logout (clear token)\r\nexport const logout = () => {\r\n    localStorage.removeItem('token');\r\n};\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,2BAA2B;;AAE5C;AACA,MAAMC,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACjD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,QAAQ,GAAGE,QAAQ,EAAE,EAAEC,OAAO,CAAC;;IAE/D;IACA,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MACd,MAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAC1C,MAAM,IAAIC,KAAK,CAACF,YAAY,IAAI,eAAeH,QAAQ,CAACM,MAAM,EAAE,CAAC;IACrE;;IAEA;IACA,MAAMC,WAAW,GAAGP,QAAQ,CAACQ,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IACxD,IAAIF,WAAW,IAAIA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MACzD,OAAOV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAC1B;IAEA,OAAO,IAAI,CAAC,CAAC;EACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC1C,MAAMF,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,OAAOlB,UAAU,CAAC,SAAS,CAAC;AAChC,CAAC;;AAED;AACA,OAAO,MAAMmB,WAAW,GAAG,MAAOC,KAAK,IAAK;EACxC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOvB,UAAU,CAAC,SAAS,EAAE;IACzBwB,MAAM,EAAE,MAAM;IACdb,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClCc,aAAa,EAAE,UAAUJ,KAAK;IAClC,CAAC;IACDK,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,KAAK;EAC9B,CAAC,CAAC;AACN,CAAC;;AAED;AACA,OAAO,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,OAAO7B,UAAU,CAAC,QAAQ,CAAC;AAC/B,CAAC;;AAED;AACA,OAAO,MAAM8B,KAAK,GAAG,MAAOC,WAAW,IAAK;EACxC,MAAMC,IAAI,GAAG,MAAMhC,UAAU,CAAC,aAAa,EAAE;IACzCwB,MAAM,EAAE,MAAM;IACdb,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/Ce,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,WAAW;EACpC,CAAC,CAAC;;EAEF;EACA,IAAIC,IAAI,CAACX,KAAK,EAAE;IACZC,YAAY,CAACW,OAAO,CAAC,OAAO,EAAED,IAAI,CAACX,KAAK,CAAC;EAC7C;EACA,OAAOW,IAAI;AACf,CAAC;;AAED;AACA,OAAO,MAAME,QAAQ,GAAG,MAAOH,WAAW,IAAK;EAC3C,OAAO/B,UAAU,CAAC,gBAAgB,EAAE;IAChCwB,MAAM,EAAE,MAAM;IACdb,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/Ce,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,WAAW;EACpC,CAAC,CAAC;AACN,CAAC;;AAED;AACA,OAAO,MAAMI,MAAM,GAAGA,CAAA,KAAM;EACxBb,YAAY,CAACc,UAAU,CAAC,OAAO,CAAC;AACpC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}