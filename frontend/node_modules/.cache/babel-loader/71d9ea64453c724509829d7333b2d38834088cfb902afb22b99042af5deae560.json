{"ast":null,"code":"const BASE_URL = 'http://localhost:8080/api';\n\n/**\r\n * Holt Kommentare für ein bestimmtes Forum.\r\n * @param {string} forumId - Die ID des Forums.\r\n * @returns {Promise<any>} - Die Liste der Kommentare.\r\n */\nexport const fetchCommentsByForum = async forumId => apiRequest(`/forums/${forumId}/comments`, 'GET');\n\n/**\r\n * Fügt einen neuen Kommentar zu einem Forum hinzu.\r\n * @param {string} forumId - Die ID des Forums.\r\n * @param {object} comment - Der Kommentarinhalt.\r\n * @returns {Promise<any>} - Der hinzugefügte Kommentar.\r\n */\nexport const addCommentToForum = async (forumId, comment) => apiRequest(`/forums/${forumId}/comments`, 'POST', comment, true);\n\n/**\r\n * Allgemeine API-Anfragefunktion.\r\n */\nconst apiRequest = async (endpoint, method = 'GET', body = null, isAuthRequired = false) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (isAuthRequired) {\n      const token = localStorage.getItem('token');\n      headers.Authorization = `Bearer ${token}`;\n    }\n    const response = await fetch(`${BASE_URL}${endpoint}`, {\n      method,\n      headers,\n      body: body ? JSON.stringify(body) : null\n    });\n    if (!response.ok) {\n      throw new Error(`Fehler: ${response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(`API Request Error: ${error}`);\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","fetchCommentsByForum","forumId","apiRequest","addCommentToForum","comment","endpoint","method","body","isAuthRequired","headers","token","localStorage","getItem","Authorization","response","fetch","JSON","stringify","ok","Error","statusText","json","error","console"],"sources":["C:/Users/merlini/Desktop/223/Gringo/frontend/src/services/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8080/api';\r\n\r\n/**\r\n * Holt Kommentare für ein bestimmtes Forum.\r\n * @param {string} forumId - Die ID des Forums.\r\n * @returns {Promise<any>} - Die Liste der Kommentare.\r\n */\r\nexport const fetchCommentsByForum = async (forumId) =>\r\n    apiRequest(`/forums/${forumId}/comments`, 'GET');\r\n\r\n/**\r\n * Fügt einen neuen Kommentar zu einem Forum hinzu.\r\n * @param {string} forumId - Die ID des Forums.\r\n * @param {object} comment - Der Kommentarinhalt.\r\n * @returns {Promise<any>} - Der hinzugefügte Kommentar.\r\n */\r\nexport const addCommentToForum = async (forumId, comment) =>\r\n    apiRequest(`/forums/${forumId}/comments`, 'POST', comment, true);\r\n\r\n/**\r\n * Allgemeine API-Anfragefunktion.\r\n */\r\nconst apiRequest = async (endpoint, method = 'GET', body = null, isAuthRequired = false) => {\r\n    try {\r\n        const headers = { 'Content-Type': 'application/json' };\r\n        if (isAuthRequired) {\r\n            const token = localStorage.getItem('token');\r\n            headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        const response = await fetch(`${BASE_URL}${endpoint}`, {\r\n            method,\r\n            headers,\r\n            body: body ? JSON.stringify(body) : null,\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(`Fehler: ${response.statusText}`);\r\n        }\r\n        return response.json();\r\n    } catch (error) {\r\n        console.error(`API Request Error: ${error}`);\r\n        throw error;\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,2BAA2B;;AAE5C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAOC,OAAO,IAC9CC,UAAU,CAAC,WAAWD,OAAO,WAAW,EAAE,KAAK,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,iBAAiB,GAAG,MAAAA,CAAOF,OAAO,EAAEG,OAAO,KACpDF,UAAU,CAAC,WAAWD,OAAO,WAAW,EAAE,MAAM,EAAEG,OAAO,EAAE,IAAI,CAAC;;AAEpE;AACA;AACA;AACA,MAAMF,UAAU,GAAG,MAAAA,CAAOG,QAAQ,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,EAAEC,cAAc,GAAG,KAAK,KAAK;EACxF,IAAI;IACA,MAAMC,OAAO,GAAG;MAAE,cAAc,EAAE;IAAmB,CAAC;IACtD,IAAID,cAAc,EAAE;MAChB,MAAME,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3CH,OAAO,CAACI,aAAa,GAAG,UAAUH,KAAK,EAAE;IAC7C;IACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGhB,QAAQ,GAAGM,QAAQ,EAAE,EAAE;MACnDC,MAAM;MACNG,OAAO;MACPF,IAAI,EAAEA,IAAI,GAAGS,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,GAAG;IACxC,CAAC,CAAC;IACF,IAAI,CAACO,QAAQ,CAACI,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,WAAWL,QAAQ,CAACM,UAAU,EAAE,CAAC;IACrD;IACA,OAAON,QAAQ,CAACO,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsBA,KAAK,EAAE,CAAC;IAC5C,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}