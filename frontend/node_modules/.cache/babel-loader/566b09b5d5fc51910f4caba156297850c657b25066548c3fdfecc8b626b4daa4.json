{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manu_\\\\Desktop\\\\Gringo\\\\frontend\\\\src\\\\pages\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { login } from '../services/api'; // Import login API function\n\n/**\r\n * Login Component\r\n *\r\n * This component provides a simple login form where users can enter their\r\n * username and password to authenticate. Upon successful login, the user\r\n * receives a JWT token, which is stored in `localStorage` for future API requests.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  // State to manage user input for username and password\n  const [credentials, setCredentials] = useState({\n    username: '',\n    password: ''\n  });\n\n  /**\r\n   * Handles form submission.\r\n   * - Prevents the default form behavior (page reload).\r\n   * - Calls the `login` function to authenticate the user.\r\n   * - Stores the returned JWT token in `localStorage` if successful.\r\n   * - Redirects the user to the forums page upon successful login.\r\n   * - Logs errors in case of failed login attempts.\r\n   */\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevents the default form submission behavior\n\n    try {\n      const token = await login(credentials); // Call the API with user credentials\n      localStorage.setItem('token', token); // Store the JWT token in local storage\n      window.location.href = '/forums'; // Redirect the user to the forums page\n    } catch (error) {\n      console.error('Error logging in:', error); // Log any errors if login fails\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Username\",\n      value: credentials.username,\n      onChange: e => setCredentials({\n        ...credentials,\n        username: e.target.value\n      }),\n      required: true // Ensures the field is not left empty\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Password\",\n      value: credentials.password,\n      onChange: e => setCredentials({\n        ...credentials,\n        password: e.target.value\n      }),\n      required: true // Ensures the field is not left empty\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"rueEJbdnZgcg1jOuSt/nqRO3DUA=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","login","jsxDEV","_jsxDEV","Login","_s","credentials","setCredentials","username","password","handleSubmit","e","preventDefault","token","localStorage","setItem","window","location","href","error","console","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["C:/Users/manu_/Desktop/Gringo/frontend/src/pages/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { login } from '../services/api'; // Import login API function\r\n\r\n/**\r\n * Login Component\r\n *\r\n * This component provides a simple login form where users can enter their\r\n * username and password to authenticate. Upon successful login, the user\r\n * receives a JWT token, which is stored in `localStorage` for future API requests.\r\n */\r\nconst Login = () => {\r\n    // State to manage user input for username and password\r\n    const [credentials, setCredentials] = useState({ username: '', password: '' });\r\n\r\n    /**\r\n     * Handles form submission.\r\n     * - Prevents the default form behavior (page reload).\r\n     * - Calls the `login` function to authenticate the user.\r\n     * - Stores the returned JWT token in `localStorage` if successful.\r\n     * - Redirects the user to the forums page upon successful login.\r\n     * - Logs errors in case of failed login attempts.\r\n     */\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault(); // Prevents the default form submission behavior\r\n\r\n        try {\r\n            const token = await login(credentials); // Call the API with user credentials\r\n            localStorage.setItem('token', token); // Store the JWT token in local storage\r\n            window.location.href = '/forums'; // Redirect the user to the forums page\r\n        } catch (error) {\r\n            console.error('Error logging in:', error); // Log any errors if login fails\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h1>Login</h1>\r\n\r\n            {/* Username Input Field */}\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Username\"\r\n                value={credentials.username}\r\n                onChange={(e) => setCredentials({ ...credentials, username: e.target.value })}\r\n                required // Ensures the field is not left empty\r\n            />\r\n\r\n            {/* Password Input Field */}\r\n            <input\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                value={credentials.password}\r\n                onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}\r\n                required // Ensures the field is not left empty\r\n            />\r\n\r\n            {/* Submit Button */}\r\n            <button type=\"submit\">Login</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,KAAK,QAAQ,iBAAiB,CAAC,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AANA,SAAAC,MAAA,IAAAC,OAAA;AAOA,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC;IAAEQ,QAAQ,EAAE,EAAE;IAAEC,QAAQ,EAAE;EAAG,CAAC,CAAC;;EAE9E;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;;IAEpB,IAAI;MACA,MAAMC,KAAK,GAAG,MAAMZ,KAAK,CAACK,WAAW,CAAC,CAAC,CAAC;MACxCQ,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC,CAAC,CAAC;MACtCG,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,SAAS,CAAC,CAAC;IACtC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC,CAAC,CAAC;IAC/C;EACJ,CAAC;EAED,oBACIhB,OAAA;IAAMkB,QAAQ,EAAEX,YAAa;IAAAY,QAAA,gBACzBnB,OAAA;MAAAmB,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGdvB,OAAA;MACIwB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,UAAU;MACtBC,KAAK,EAAEvB,WAAW,CAACE,QAAS;MAC5BsB,QAAQ,EAAGnB,CAAC,IAAKJ,cAAc,CAAC;QAAE,GAAGD,WAAW;QAAEE,QAAQ,EAAEG,CAAC,CAACoB,MAAM,CAACF;MAAM,CAAC,CAAE;MAC9EG,QAAQ,OAAC;IAAA;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,eAGFvB,OAAA;MACIwB,IAAI,EAAC,UAAU;MACfC,WAAW,EAAC,UAAU;MACtBC,KAAK,EAAEvB,WAAW,CAACG,QAAS;MAC5BqB,QAAQ,EAAGnB,CAAC,IAAKJ,cAAc,CAAC;QAAE,GAAGD,WAAW;QAAEG,QAAQ,EAAEE,CAAC,CAACoB,MAAM,CAACF;MAAM,CAAC,CAAE;MAC9EG,QAAQ,OAAC;IAAA;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,eAGFvB,OAAA;MAAQwB,IAAI,EAAC,QAAQ;MAAAL,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClC,CAAC;AAEf,CAAC;AAACrB,EAAA,CAlDID,KAAK;AAAA6B,EAAA,GAAL7B,KAAK;AAoDX,eAAeA,KAAK;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}