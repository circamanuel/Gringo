{"ast":null,"code":"// Base URL for all API calls\nconst BASE_URL = 'http://localhost:8080/api';\n\n/**\r\n * Utility function: Retrieves the token from LocalStorage and verifies its validity.\r\n * If the token is expired, it removes the token and redirects to login.\r\n * @returns {string|null} The valid token or null if the token is missing or expired.\r\n */\nconst getToken = () => {\n  const token = localStorage.getItem('token'); // Retrieve token from LocalStorage\n  if (!token) return null;\n  try {\n    const {\n      exp\n    } = JSON.parse(atob(token.split('.')[1])); // Decode JWT payload\n\n    // Check if the token is expired\n    if (exp * 1000 < Date.now()) {\n      console.warn('Token expired. Logging out user.');\n      localStorage.removeItem('token'); // Remove expired token\n      window.location.href = '/login'; // Redirect to login page\n      return null;\n    }\n    return token; // Return valid token\n  } catch (error) {\n    console.error('Invalid token:', error);\n    localStorage.removeItem('token'); // Remove invalid token\n    return null;\n  }\n};\n\n/**\r\n * Utility function: Creates HTTP headers for API requests.\r\n * @param {boolean} isAuthRequired Determines if the Authorization header is needed.\r\n * @returns {object} HTTP headers.\r\n */\nconst getHeaders = (isAuthRequired = false) => {\n  const headers = {\n    'Content-Type': 'application/json'\n  }; // Default headers\n  if (isAuthRequired) {\n    const token = getToken();\n    if (token) headers.Authorization = `Bearer ${token}`; // Add Authorization header\n  }\n  return headers;\n};\n\n/**\r\n * Utility function: Handles generic API requests.\r\n * @param {string} endpoint The API endpoint.\r\n * @param {string} method The HTTP method (GET, POST, PUT, DELETE).\r\n * @param {object|null} body Request payload (if required).\r\n * @param {boolean} isAuthRequired Determines if authentication is needed.\r\n * @returns {Promise<any>} API response.\r\n */\nconst apiRequest = async (endpoint, method = 'GET', body = null, isAuthRequired = false) => {\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`, {\n      method,\n      headers: getHeaders(isAuthRequired),\n      body: body ? JSON.stringify(body) : null // Send body as JSON (if applicable)\n    });\n\n    // Handle errors based on response status\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(errorText || 'Error processing API request');\n    }\n    return response.status !== 204 ? response.json() : null; // Handle responses with no content (204)\n  } catch (error) {\n    console.error(`API Error [${method} ${endpoint}]:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * API Calls\r\n */\n\n// Fetch all forums\nexport const fetchForums = async () => apiRequest('/forums');\n\n/**\r\n * Creates a new forum.\r\n * @param {object} forum Forum data.\r\n * @returns {Promise<any>} API response.\r\n */\nexport const createForum = async forum => apiRequest('/forums', 'POST', forum, true);\n\n/**\r\n * Updates an existing forum.\r\n * @param {string} forumId Forum ID.\r\n * @param {object} forum Updated forum data.\r\n * @returns {Promise<any>} Updated forum response.\r\n */\nexport const updateForum = async (forumId, forum) => apiRequest(`/forums/${forumId}`, 'PUT', forum, true);\n\n/**\r\n * Deletes a forum.\r\n * @param {string} forumId Forum ID.\r\n * @returns {Promise<void>} No response on success.\r\n */\nexport const deleteForum = async forumId => apiRequest(`/forums/${forumId}`, 'DELETE', null, true);\n\n/**\r\n * Fetches all posts in a specific forum.\r\n * @param {string} forumId Forum ID.\r\n * @returns {Promise<any>} List of posts.\r\n */\nexport const fetchPostsByForum = async forumId => apiRequest(`/posts?forumId=${forumId}`);\n\n/**\r\n * Creates a new post in a forum.\r\n * @param {object} postData { forumId, content }\r\n * @returns {Promise<any>} Created post.\r\n */\nexport const createPost = async postData => apiRequest('/posts', 'POST', postData, true);\n\n/**\r\n * Deletes a specific post.\r\n * @param {string} postId Post ID.\r\n * @returns {Promise<void>} No response on success.\r\n */\nexport const deletePost = async postId => apiRequest(`/posts/${postId}`, 'DELETE', null, true);\n\n/**\r\n * Fetches posts created by a specific user.\r\n * @param {string} username Username.\r\n * @returns {Promise<any>} List of user posts.\r\n */\nexport const fetchPostsByUser = async username => apiRequest(`/posts/user/${username}`);\n\n/**\r\n * Fetches details of a specific user.\r\n * @param {string} userId User ID.\r\n * @returns {Promise<any>} User details.\r\n */\nexport const fetchUserById = async userId => apiRequest(`/users/${userId}`, 'GET', null, true);\n\n/**\r\n * Adds a comment to a post.\r\n * @param {string} postId Post ID.\r\n * @param {object} commentData { content }\r\n * @returns {Promise<any>} Created comment.\r\n */\nexport const addCommentToPost = async (postId, commentData) => apiRequest(`/posts/${postId}/comments`, 'POST', commentData, true);\n\n/**\r\n * Fetches all comments on a specific post.\r\n * @param {string} postId Post ID.\r\n * @returns {Promise<any>} List of comments.\r\n */\nexport const fetchCommentsByPost = async postId => apiRequest(`/posts/${postId}/comments`, 'GET');\n\n/**\r\n * Logs in a user and returns a token.\r\n * @param {object} credentials { username, password }\r\n * @returns {Promise<string>} Token on success.\r\n */\nexport const login = async credentials => {\n  const response = await apiRequest('/auth/login', 'POST', credentials);\n  return response.token; // Return token\n};\n\n/**\r\n * Registers a new user.\r\n * @param {object} credentials { username, password }\r\n * @returns {Promise<void>} No response on success.\r\n */\nexport const register = async credentials => apiRequest('/auth/register', 'POST', credentials);\n\n/**\r\n * Logs out the user by removing the token and redirecting to login.\r\n */\nexport const logout = () => {\n  localStorage.removeItem('token'); // Remove token\n  window.location.href = '/login'; // Redirect to login\n};","map":{"version":3,"names":["BASE_URL","getToken","token","localStorage","getItem","exp","JSON","parse","atob","split","Date","now","console","warn","removeItem","window","location","href","error","getHeaders","isAuthRequired","headers","Authorization","apiRequest","endpoint","method","body","response","fetch","stringify","ok","errorText","text","Error","status","json","fetchForums","createForum","forum","updateForum","forumId","deleteForum","fetchPostsByForum","createPost","postData","deletePost","postId","fetchPostsByUser","username","fetchUserById","userId","addCommentToPost","commentData","fetchCommentsByPost","login","credentials","register","logout"],"sources":["C:/Users/manu_/Desktop/Gringo/frontend/src/services/api.js"],"sourcesContent":["// Base URL for all API calls\r\nconst BASE_URL = 'http://localhost:8080/api';\r\n\r\n/**\r\n * Utility function: Retrieves the token from LocalStorage and verifies its validity.\r\n * If the token is expired, it removes the token and redirects to login.\r\n * @returns {string|null} The valid token or null if the token is missing or expired.\r\n */\r\nconst getToken = () => {\r\n    const token = localStorage.getItem('token'); // Retrieve token from LocalStorage\r\n    if (!token) return null;\r\n\r\n    try {\r\n        const { exp } = JSON.parse(atob(token.split('.')[1])); // Decode JWT payload\r\n\r\n        // Check if the token is expired\r\n        if (exp * 1000 < Date.now()) {\r\n            console.warn('Token expired. Logging out user.');\r\n            localStorage.removeItem('token'); // Remove expired token\r\n            window.location.href = '/login'; // Redirect to login page\r\n            return null;\r\n        }\r\n        return token; // Return valid token\r\n    } catch (error) {\r\n        console.error('Invalid token:', error);\r\n        localStorage.removeItem('token'); // Remove invalid token\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * Utility function: Creates HTTP headers for API requests.\r\n * @param {boolean} isAuthRequired Determines if the Authorization header is needed.\r\n * @returns {object} HTTP headers.\r\n */\r\nconst getHeaders = (isAuthRequired = false) => {\r\n    const headers = { 'Content-Type': 'application/json' }; // Default headers\r\n    if (isAuthRequired) {\r\n        const token = getToken();\r\n        if (token) headers.Authorization = `Bearer ${token}`; // Add Authorization header\r\n    }\r\n    return headers;\r\n};\r\n\r\n/**\r\n * Utility function: Handles generic API requests.\r\n * @param {string} endpoint The API endpoint.\r\n * @param {string} method The HTTP method (GET, POST, PUT, DELETE).\r\n * @param {object|null} body Request payload (if required).\r\n * @param {boolean} isAuthRequired Determines if authentication is needed.\r\n * @returns {Promise<any>} API response.\r\n */\r\nconst apiRequest = async (endpoint, method = 'GET', body = null, isAuthRequired = false) => {\r\n    try {\r\n        const response = await fetch(`${BASE_URL}${endpoint}`, {\r\n            method,\r\n            headers: getHeaders(isAuthRequired),\r\n            body: body ? JSON.stringify(body) : null, // Send body as JSON (if applicable)\r\n        });\r\n\r\n        // Handle errors based on response status\r\n        if (!response.ok) {\r\n            const errorText = await response.text();\r\n            throw new Error(errorText || 'Error processing API request');\r\n        }\r\n\r\n        return response.status !== 204 ? response.json() : null; // Handle responses with no content (204)\r\n    } catch (error) {\r\n        console.error(`API Error [${method} ${endpoint}]:`, error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * API Calls\r\n */\r\n\r\n// Fetch all forums\r\nexport const fetchForums = async () => apiRequest('/forums');\r\n\r\n/**\r\n * Creates a new forum.\r\n * @param {object} forum Forum data.\r\n * @returns {Promise<any>} API response.\r\n */\r\nexport const createForum = async (forum) => apiRequest('/forums', 'POST', forum, true);\r\n\r\n/**\r\n * Updates an existing forum.\r\n * @param {string} forumId Forum ID.\r\n * @param {object} forum Updated forum data.\r\n * @returns {Promise<any>} Updated forum response.\r\n */\r\nexport const updateForum = async (forumId, forum) => apiRequest(`/forums/${forumId}`, 'PUT', forum, true);\r\n\r\n/**\r\n * Deletes a forum.\r\n * @param {string} forumId Forum ID.\r\n * @returns {Promise<void>} No response on success.\r\n */\r\nexport const deleteForum = async (forumId) => apiRequest(`/forums/${forumId}`, 'DELETE', null, true);\r\n\r\n/**\r\n * Fetches all posts in a specific forum.\r\n * @param {string} forumId Forum ID.\r\n * @returns {Promise<any>} List of posts.\r\n */\r\nexport const fetchPostsByForum = async (forumId) => apiRequest(`/posts?forumId=${forumId}`);\r\n\r\n/**\r\n * Creates a new post in a forum.\r\n * @param {object} postData { forumId, content }\r\n * @returns {Promise<any>} Created post.\r\n */\r\nexport const createPost = async (postData) => apiRequest('/posts', 'POST', postData, true);\r\n\r\n/**\r\n * Deletes a specific post.\r\n * @param {string} postId Post ID.\r\n * @returns {Promise<void>} No response on success.\r\n */\r\nexport const deletePost = async (postId) => apiRequest(`/posts/${postId}`, 'DELETE', null, true);\r\n\r\n/**\r\n * Fetches posts created by a specific user.\r\n * @param {string} username Username.\r\n * @returns {Promise<any>} List of user posts.\r\n */\r\nexport const fetchPostsByUser = async (username) => apiRequest(`/posts/user/${username}`);\r\n\r\n/**\r\n * Fetches details of a specific user.\r\n * @param {string} userId User ID.\r\n * @returns {Promise<any>} User details.\r\n */\r\nexport const fetchUserById = async (userId) => apiRequest(`/users/${userId}`, 'GET', null, true);\r\n\r\n/**\r\n * Adds a comment to a post.\r\n * @param {string} postId Post ID.\r\n * @param {object} commentData { content }\r\n * @returns {Promise<any>} Created comment.\r\n */\r\nexport const addCommentToPost = async (postId, commentData) => apiRequest(`/posts/${postId}/comments`, 'POST', commentData, true);\r\n\r\n/**\r\n * Fetches all comments on a specific post.\r\n * @param {string} postId Post ID.\r\n * @returns {Promise<any>} List of comments.\r\n */\r\nexport const fetchCommentsByPost = async (postId) => apiRequest(`/posts/${postId}/comments`, 'GET');\r\n\r\n/**\r\n * Logs in a user and returns a token.\r\n * @param {object} credentials { username, password }\r\n * @returns {Promise<string>} Token on success.\r\n */\r\nexport const login = async (credentials) => {\r\n    const response = await apiRequest('/auth/login', 'POST', credentials);\r\n    return response.token; // Return token\r\n};\r\n\r\n/**\r\n * Registers a new user.\r\n * @param {object} credentials { username, password }\r\n * @returns {Promise<void>} No response on success.\r\n */\r\nexport const register = async (credentials) => apiRequest('/auth/register', 'POST', credentials);\r\n\r\n/**\r\n * Logs out the user by removing the token and redirecting to login.\r\n */\r\nexport const logout = () => {\r\n    localStorage.removeItem('token'); // Remove token\r\n    window.location.href = '/login'; // Redirect to login\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}